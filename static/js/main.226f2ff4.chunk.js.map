{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","myref","useRef","dataCount","setDataCount","withTimeout","setWithTimeout","useEffect","generateRandomArray","count","max","randomData","i","push","Math","round","random","bubbleSort","array","a","length","swapped","j","swapItems","selectionSort","n","min","mergeSort","middle","left","slice","right","shift","concat","merge","updateDataAndWait","Promise","r","setTimeout","quickSort","low","high","partition","pivot","index","tempi","className","style","width","height","display","ref","current","displayWidth","offsetWidth","displayHeight","offsetHeight","itemWidth","floor","map","item","currentHeight","backgroundColor","boxSizing","displayDataArray","onClick","doQuickSort","sorted","doMergeSort","type","title","onChange","e","target","value","checked","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.226f2ff4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const myref = useRef(null);\n  const [dataCount, setDataCount] = useState(100);\n  const [withTimeout, setWithTimeout] = useState(true);\n\n  const WAITING_TIME = 10; // in ms\n\n  useEffect(() => {\n    generateRandomArray(dataCount, 100);\n  }, [dataCount]);\n\n  const generateRandomArray = (count, max) => {\n    var randomData = [];\n    for (var i = 0; i < count; i++) {\n      randomData.push(Math.round(Math.random() * max));\n    }\n    setData(randomData);\n  };\n\n  const displayDataArray = () => {\n    if (myref.current) {\n      const displayWidth = myref.current.offsetWidth;\n      const displayHeight = myref.current.offsetHeight;\n      const itemWidth = Math.floor(displayWidth / data.length);\n\n      return data.map((item) => {\n        const currentHeight = item * 0.01 * displayHeight;\n        return (\n          <div\n            style={{\n              height: `${currentHeight}px`,\n              width: `${itemWidth}px`,\n              backgroundColor: \"blue\",\n              display: \"inline-block\",\n              boxSizing: \"border-box\",\n            }}></div>\n        );\n      });\n    }\n  };\n\n  const doBubbleSort = () => {\n    bubbleSort(data);\n  };\n\n  const bubbleSort = async (array) => {\n    for (let i = 0; i < array.length - 1; i++) {\n      let swapped = false;\n\n      for (let j = 0; j < array.length - i; j++) {\n        if (array[j] > array[j + 1]) {\n          array = await swapItems(array, j, j + 1);\n          swapped = true;\n        }\n      }\n      if (!swapped) {\n        break;\n      }\n    }\n  };\n\n  const doSelectionSort = () => {\n    selectionSort(data, data.length);\n  };\n\n  // array = list to sort, n = lenght of list\n  const selectionSort = async (array, n) => {\n    for (let i = 0; i < n - 1; i++) {\n      let min = i;\n      // check minimum element\n      for (let j = i + 1; j < n; j++) {\n        if (array[j] < array[min]) {\n          min = j;\n        }\n      }\n      if (min != i) {\n        array = await swapItems(array, min, i);\n      }\n    }\n  };\n\n  const doMergeSort = () => {\n    let sorted = mergeSort(data, 0, data.length - 1);\n    setData(sorted);\n  };\n\n  const merge = (left, right) => {\n    let array = [];\n    while (left.length && right.length) {\n      if (left[0] < right[0]) array.push(left.shift());\n      else array.push(right.shift());\n    }\n    return array.concat(left.slice().concat(right.slice()));\n  };\n  const mergeSort = (array) => {\n    const middle = Math.round(array.length / 2);\n\n    if (array.length < 2) return array;\n\n    const left = array.slice(0, middle);\n    const right = array.slice(middle);\n    // await updateDataAndWait([...left, ...right]);\n    return merge(mergeSort(left), mergeSort(right));\n  };\n\n  const updateDataAndWait = async (data) => {\n    setData([...data]);\n    await new Promise((r) => setTimeout(r, WAITING_TIME));\n  };\n\n  const doQuickSort = () => {\n    const array = [...data];\n    quickSort(array, 0, data.length - 1);\n  };\n\n  const quickSort = async (array, low, high) => {\n    if (low < high) {\n      let pivot = await partition(array, low, high);\n      quickSort(array, low, pivot - 1);\n      quickSort(array, pivot + 1, high);\n    }\n  };\n\n  const partition = async (array, low, high) => {\n    const pivot = array[high];\n    let index = low - 1;\n\n    for (let j = low; j <= high - 1; j++) {\n      if (array[j] < pivot) {\n        index++;\n        array = await swapItems(array, index, j);\n      }\n    }\n    array = await swapItems(array, index + 1, high);\n    return index + 1;\n  };\n\n  const swapItems = async (array, i, j) => {\n    const tempi = array[i];\n    array[i] = array[j];\n    array[j] = tempi;\n    if (withTimeout)\n      await updateDataAndWait([...array]);\n    setData([...array]);\n\n    return array;\n  };\n  return (\n    <div className=\"App\">\n      {/* Display Data */}\n      <div style={{ width: \"100%\", height: \"80%\", display: \"inline-block\" }} ref={myref}>\n        {displayDataArray()}\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            doQuickSort();\n          }}>\n          QuickSort\n        </button>\n        <button\n          onClick={() => {\n            doSelectionSort();\n          }}>\n          Selection Sort\n        </button>\n        <button\n          onClick={() => {\n            doBubbleSort();\n          }}>\n          Bubble Sort\n        </button>\n        <button\n          onClick={() => {\n            doMergeSort();\n          }}>\n          Merge Sort\n        </button>\n        <button\n          onClick={() => {\n            generateRandomArray(dataCount, 100);\n          }}>\n          Reload Data\n        </button>\n      </div>\n      <div>\n        number of items:\n        <input\n          type=\"number\"\n          title=\"Count of data\"\n          onChange={(e) => {\n            setDataCount(e.target.value);\n          }}\n          value={dataCount}\n        />\n        sort with timeout each change:\n        <input\n          type=\"checkbox\"\n          checked={withTimeout}\n          onChange={(e) => {\n            console.log(e.target.checked);\n            setWithTimeout(e.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}