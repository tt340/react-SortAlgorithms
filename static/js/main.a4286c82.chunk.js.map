{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","myref","useRef","dataCount","setDataCount","useEffect","generateRandomArray","count","max","randomData","i","push","Math","round","random","bubbleSort","array","a","length","swapped","j","swapItems","selectionSort","n","min","mergeSort","middle","left","slice","right","shift","concat","merge","quickSort","low","high","partition","pivot","index","Promise","r","setTimeout","tempi","className","style","width","height","display","ref","current","displayWidth","offsetWidth","displayHeight","offsetHeight","itemWidth","floor","map","item","currentHeight","backgroundColor","boxSizing","displayDataArray","onClick","doQuickSort","sorted","doMergeSort","type","title","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4286c82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const myref = useRef(null);\n  const [dataCount, setDataCount] = useState(100);\n\n  const WAITING_TIME = 10; // in ms\n\n  useEffect(() => {\n    generateRandomArray(dataCount, 100);\n  }, [dataCount]);\n\n  const generateRandomArray = (count, max) => {\n    var randomData = [];\n    for (var i = 0; i < count; i++) {\n      randomData.push(Math.round(Math.random() * max));\n    }\n    setData(randomData);\n  };\n\n  const displayDataArray = () => {\n    if (myref.current) {\n      const displayWidth = myref.current.offsetWidth;\n      const displayHeight = myref.current.offsetHeight;\n      const itemWidth = Math.floor(displayWidth / data.length);\n\n      return data.map((item) => {\n        const currentHeight = item * 0.01 * displayHeight;\n        return (\n          <div\n            style={{\n              height: `${currentHeight}px`,\n              width: `${itemWidth}px`,\n              backgroundColor: \"blue\",\n              display: \"inline-block\",\n              boxSizing: \"border-box\",\n            }}></div>\n        );\n      });\n    }\n  };\n\n  const doBubbleSort = () => {\n    bubbleSort(data);\n  };\n\n  const bubbleSort = async (array) => {\n    for (let i = 0; i < array.length - 1; i++) {\n      let swapped = false;\n\n      for (let j = 0; j < array.length - 1; j++) {\n        if (array[j] > array[j + 1]) {\n          array = await swapItems(array, j, j + 1);\n          swapped = true;\n        }\n      }\n      if (!swapped) {\n        break;\n      }\n    }\n  };\n\n  const doSelectionSort = () => {\n    selectionSort(data, data.length);\n  };\n\n  // array = list to sort, n = lenght of list\n  const selectionSort = async (array, n) => {\n    for (let i = 0; i < n - 1; i++) {\n      let min = i;\n      // check minimum element\n      for (let j = i + 1; j < n; j++) {\n        if (array[j] < array[min]) {\n          min = j;\n        }\n      }\n      if (min != i) {\n        array = await swapItems(array, min, i);\n      }\n    }\n  };\n\n  const doMergeSort = () => {\n    let sorted = mergeSort(data, 0, data.length - 1);\n    setData(sorted);\n  };\n\n  \n  const merge =  (left, right) => {\n    let array = [];\n    while (left.length && right.length) {\n      if (left[0] < right[0]) array.push(left.shift());\n      else array.push(right.shift());\n\n    }\n    return array.concat(left.slice().concat(right.slice()));\n  };\n  const mergeSort =  (array) => {\n    const middle = Math.round(array.length / 2);\n\n    if (array.length < 2) return array;\n\n    const left = array.slice(0, middle);\n    const right = array.slice(middle);\n   // await updateDataAndWait([...left, ...right]);\n    return merge(mergeSort(left), mergeSort(right));\n  };\n\n  const updateDataAndWait = async (data) => {\n    setData([...data]);\n    await new Promise((r) => setTimeout(r, WAITING_TIME));\n  };\n\n  const doQuickSort = () => {\n    const array = [...data];\n    quickSort(array, 0, data.length - 1);\n  };\n\n  const quickSort = async (array, low, high) => {\n    if (low < high) {\n      let pivot = await partition(array, low, high);\n      quickSort(array, low, pivot - 1);\n      quickSort(array, pivot + 1, high);\n    }\n  };\n\n  const partition = async (array, low, high) => {\n    const pivot = array[high];\n    let index = low - 1;\n\n    for (let j = low; j <= high - 1; j++) {\n      if (array[j] < pivot) {\n        index++;\n        array = await swapItems(array, index, j);\n      }\n    }\n    array = await swapItems(array, index + 1, high);\n    return index + 1;\n  };\n\n  const swapItems = async (array, i, j) => {\n    await new Promise((r) => setTimeout(r, WAITING_TIME));\n    const tempi = array[i];\n    array[i] = array[j];\n    array[j] = tempi;\n    setData([...array]);\n\n    return array;\n  };\n  return (\n    <div className=\"App\">\n      {/* Display Data */}\n      <div style={{ width: \"100%\", height: \"80%\", display: \"inline-block\" }} ref={myref}>\n        {displayDataArray()}\n      </div>\n      <div>\n        <button\n          onClick={() => {\n            doQuickSort();\n          }}>\n          QuickSort\n        </button>\n        <button\n          onClick={() => {\n            doSelectionSort();\n          }}>\n          Selection Sort\n        </button>\n        <button\n          onClick={() => {\n            doBubbleSort();\n          }}>\n          Bubble Sort\n        </button>\n        <button\n          onClick={() => {\n            doMergeSort();\n          }}>\n          Merge Sort\n        </button>\n        <button\n          onClick={() => {\n            generateRandomArray(dataCount, 100);\n          }}>\n          Reload Data\n        </button>\n      </div>\n      <div>\n        <input type=\"number\" title=\"Count of data\" onChange={(e) =>{setDataCount(e.target.value)}} value={dataCount}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}